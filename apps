                <div class="tool-header" onclick="toggleTool('portfolio', event)">
                    <span class="tool-icon">üìä</span>
                    <h3 class="tool-title">Portfolio Tracker</h3>
                </div>
                <p class="tool-description">Track your cryptocurrency portfolio value and performance</p>
                <div class="tool-form" id="portfolio">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="portfolioCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                            <option value="solana">Solana (SOL)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Amount Held:</label>
                        <input type="number" id="portfolioAmount" placeholder="0.0" step="any">
                    </div>
                    <div class="form-group">
                        <label>Purchase Price (USD):</label>
                        <input type="number" id="purchasePrice" placeholder="0.0" step="any">
                    </div>
                    <button class="btn" onclick="calculatePortfolio()">Calculate Portfolio</button>
                    <div class="result" id="portfolioResult"></div>
                </div>
            </div>

            <!-- DCA Calculator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('dca', event)">
                    <span class="tool-icon">üí∞</span>
                    <h3 class="tool-title">DCA Calculator</h3>
                </div>
                <p class="tool-description">Calculate Dollar Cost Averaging returns for any cryptocurrency</p>
                <div class="tool-form" id="dca">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="dcaCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Investment Amount (USD):</label>
                        <input type="number" id="dcaAmount" placeholder="100" step="any">
                    </div>
                    <div class="form-group">
                        <label>Frequency:</label>
                        <select id="dcaFrequency">
                            <option value="weekly">Weekly</option>
                            <option value="monthly">Monthly</option>
                            <option value="daily">Daily</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Time Period (months):</label>
                        <input type="number" id="dcaPeriod" placeholder="12" min="1" max="60">
                    </div>
                    <button class="btn" onclick="calculateDCA()">Calculate DCA</button>
                    <div class="result" id="dcaResult"></div>
                </div>
            </div>

            <!-- Bitcoin Calculator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('bitcoin', event)">
                    <span class="tool-icon">‚Çø</span>
                    <h3 class="tool-title">Bitcoin Calculator</h3>
                </div>
                <p class="tool-description">Advanced Bitcoin calculations and conversions</p>
                <div class="tool-form" id="bitcoin">
                    <div class="form-group">
                        <label>Bitcoin Amount:</label>
                        <input type="number" id="btcAmount" placeholder="1.0" step="any">
                    </div>
                    <div class="form-group">
                        <label>Target Currency:</label>
                        <select id="btcCurrency">
                            <option value="usd">USD</option>
                            <option value="eur">EUR</option>
                            <option value="gbp">GBP</option>
                            <option value="jpy">JPY</option>
                        </select>
                    </div>
                    <button class="btn" onclick="calculateBitcoin()">Calculate Value</button>
                    <div class="result" id="bitcoinResult"></div>
                </div>
            </div>

            <!-- Exchange Comparator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('exchange', event)">
                    <span class="tool-icon">‚öñÔ∏è</span>
                    <h3 class="tool-title">Exchange Comparator</h3>
                </div>
                <p class="tool-description">Compare cryptocurrency prices across different exchanges</p>
                <div class="tool-form" id="exchange">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="exchangeCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Amount:</label>
                        <input type="number" id="exchangeAmount" placeholder="1.0" step="any">
                    </div>
                    <button class="btn" onclick="compareExchanges()">Compare Prices</button>
                    <div class="result" id="exchangeResult"></div>
                </div>
            </div>

            <!-- Price Alerts -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('alerts', event)">
                    <span class="tool-icon">üîî</span>
                    <h3 class="tool-title">Price Alerts</h3>
                </div>
                <p class="tool-description">Set price alerts for your favorite cryptocurrencies</p>
                <div class="tool-form" id="alerts">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="alertCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Target Price (USD):</label>
                        <input type="number" id="targetPrice" placeholder="50000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Alert Type:</label>
                        <select id="alertType">
                            <option value="above">Above Target</option>
                            <option value="below">Below Target</option>
                        </select>
                    </div>
                    <button class="btn" onclick="setAlert()">Set Alert</button>
                    <div class="result" id="alertResult"></div>
                </div>
            </div>

            <!-- Fear & Greed Calculator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('feargreed', event)">
                    <span class="tool-icon">üò±</span>
                    <h3 class="tool-title">Fear & Greed Calculator</h3>
                </div>
                <p class="tool-description">Analyze market sentiment with Fear & Greed Index</p>
                <div class="tool-form" id="feargreed">
                    <div class="form-group">
                        <label>Market Cap Change (%):</label>
                        <input type="number" id="marketCapChange" placeholder="5.2" step="any">
                    </div>
                    <div class="form-group">
                        <label>Volume Change (%):</label>
                        <input type="number" id="volumeChange" placeholder="12.5" step="any">
                    </div>
                    <div class="form-group">
                        <label>Social Media Mentions:</label>
                        <input type="number" id="socialMentions" placeholder="1000" min="0">
                    </div>
                    <button class="btn" onclick="calculateFearGreed()">Calculate Index</button>
                    <div class="result" id="feargreedResult"></div>
                </div>
            </div>

            <!-- Tax Calculator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('tax', event)">
                    <span class="tool-icon">üßæ</span>
                    <h3 class="tool-title">Tax Calculator</h3>
                </div>
                <p class="tool-description">Calculate crypto taxes and capital gains</p>
                <div class="tool-form" id="tax">
                    <div class="form-group">
                        <label>Purchase Price (USD):</label>
                        <input type="number" id="taxPurchasePrice" placeholder="30000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Sale Price (USD):</label>
                        <input type="number" id="taxSalePrice" placeholder="35000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Amount:</label>
                        <input type="number" id="taxAmount" placeholder="1.0" step="any">
                    </div>
                    <div class="form-group">
                        <label>Tax Rate (%):</label>
                        <input type="number" id="taxRate" placeholder="20" min="0" max="100">
                    </div>
                    <button class="btn" onclick="calculateTax()">Calculate Tax</button>
                    <div class="result" id="taxResult"></div>
                </div>
            </div>

            <!-- Technical Analysis -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('technical', event)">
                    <span class="tool-icon">üìà</span>
                    <h3 class="tool-title">Technical Analysis</h3>
                </div>
                <p class="tool-description">Advanced technical analysis indicators and signals</p>
                <div class="tool-form" id="technical">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="technicalCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Timeframe:</label>
                        <select id="timeframe">
                            <option value="1h">1 Hour</option>
                            <option value="4h">4 Hours</option>
                            <option value="1d">1 Day</option>
                            <option value="1w">1 Week</option>
                        </select>
                    </div>
                    <button class="btn" onclick="analyzeTechnical()">Analyze</button>
                    <div class="result" id="technicalResult"></div>
                </div>
            </div>

            <!-- Trading Simulator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('trading', event)">
                    <span class="tool-icon">üéÆ</span>
                    <h3 class="tool-title">Trading Simulator</h3>
                </div>
                <p class="tool-description">Practice trading with virtual money</p>
                <div class="tool-form" id="trading">
                    <div class="form-group">
                        <label>Virtual Balance (USD):</label>
                        <input type="number" id="virtualBalance" placeholder="10000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="tradingCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Trade Type:</label>
                        <select id="tradeType">
                            <option value="buy">Buy</option>
                            <option value="sell">Sell</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Amount (USD):</label>
                        <input type="number" id="tradeAmount" placeholder="1000" step="any">
                    </div>
                    <button class="btn" onclick="simulateTrade()">Execute Trade</button>
                    <div class="result" id="tradingResult"></div>
                </div>
            </div>

            <!-- Mining Calculator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('mining', event)">
                    <span class="tool-icon">‚õèÔ∏è</span>
                    <h3 class="tool-title">Mining Calculator</h3>
                </div>
                <p class="tool-description">Calculate mining profitability and returns</p>
                <div class="tool-form" id="mining">
                    <div class="form-group">
                        <label>Hash Rate (MH/s):</label>
                        <input type="number" id="hashRate" placeholder="100" step="any">
                    </div>
                    <div class="form-group">
                        <label>Power Consumption (W):</label>
                        <input type="number" id="powerConsumption" placeholder="3000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Electricity Cost ($/kWh):</label>
                        <input type="number" id="electricityCost" placeholder="0.12" step="any">
                    </div>
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="miningCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                        </select>
                    </div>
                    <button class="btn" onclick="calculateMining()">Calculate Profitability</button>
                    <div class="result" id="miningResult"></div>
                </div>
            </div>

            <!-- Paper Wallet Generator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('paperwallet', event)">
                    <span class="tool-icon">üìÑ</span>
                    <h3 class="tool-title">Paper Wallet Generator</h3>
                </div>
                <p class="tool-description">Generate secure paper wallets for offline storage</p>
                <div class="tool-form" id="paperwallet">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="walletCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="litecoin">Litecoin (LTC)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Number of Wallets:</label>
                        <input type="number" id="walletCount" placeholder="1" min="1" max="10">
                    </div>
                    <button class="btn" onclick="generateWallet()">Generate Wallet</button>
                    <div class="result" id="paperwalletResult"></div>
                </div>
            </div>
        </div>

            <!-- Technical Analysis -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('technical', event)">
                    <span class="tool-icon">üìà</span>
                    <h3 class="tool-title">Technical Analysis</h3>
                </div>
                <p class="tool-description">Advanced technical analysis indicators and signals</p>
                <div class="tool-form" id="technical">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="technicalCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Timeframe:</label>
                        <select id="timeframe">
                            <option value="1h">1 Hour</option>
                            <option value="4h">4 Hours</option>
                            <option value="1d">1 Day</option>
                            <option value="1w">1 Week</option>
                        </select>
                    </div>
                    <button class="btn" onclick="analyzeTechnical()">Analyze</button>
                    <div class="result" id="technicalResult"></div>
                </div>
            </div>

            <!-- Trading Simulator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('trading', event)">
                    <span class="tool-icon">üéÆ</span>
                    <h3 class="tool-title">Trading Simulator</h3>
                </div>
                <p class="tool-description">Practice trading with virtual money</p>
                <div class="tool-form" id="trading">
                    <div class="form-group">
                        <label>Virtual Balance (USD):</label>
                        <input type="number" id="virtualBalance" placeholder="10000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="tradingCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Apps Hub - CryptoTools Pro</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a3a 100%);
            color: #e0e0e0;
            line-height: 1.6;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        /* Header */
        header {
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
            border-bottom: 1px solid rgba(255, 215, 0, 0.3);
        }
        
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 2rem;
        }
        
        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            color: #ffd700;
            text-decoration: none;
        }
        
        .nav-menu {
            display: flex;
            list-style: none;
            gap: 2rem;
        }
        
        .nav-menu a {
            color: #e0e0e0;
            text-decoration: none;
            transition: color 0.3s;
        }
        
        .nav-menu a:hover {
            color: #ffd700;
        }
        
        /* Main content */
        main {
            margin-top: 100px;
            padding: 2rem 0;
        }
        
        .page-title {
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .page-title h1 {
            font-size: 3rem;
            background: linear-gradient(45deg, #ffd700, #ffed4e);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 1rem;
        }
        
        .page-title p {
            font-size: 1.2rem;
            opacity: 0.8;
        }
        
        /* Tools grid */
        .tools-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }
        
        .tool-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            border: 1px solid rgba(255, 215, 0, 0.2);
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .tool-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(255, 215, 0, 0.3);
            border-color: rgba(255, 215, 0, 0.5);
        }
        
        .tool-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        .tool-icon {
            font-size: 2.5rem;
        }
        
        .tool-title {
            color: #ffd700;
            font-size: 1.3rem;
            font-weight: bold;
        }
        
        .tool-description {
            opacity: 0.8;
            margin-bottom: 1.5rem;
            font-size: 0.95rem;
        }
        
        .tool-form {
            display: none;
        }
        
        .tool-form.active {
            display: block;
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #ffd700;
            font-weight: 500;
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid rgba(255, 215, 0, 0.3);
            border-radius: 8px;
            background: rgba(0, 0, 0, 0.3);
            color: #e0e0e0;
            font-size: 1rem;
        }
        
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #ffd700;
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.3);
        }
        
        .btn {
            background: linear-gradient(45deg, #ffd700, #ffed4e);
            color: #000;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            cursor: pointer;
            font-weight: bold;
            font-size: 1rem;
            transition: all 0.3s;
            width: 100%;
            margin-top: 1rem;
        }
        
        .btn:hover {
            transform: scale(1.02);
            box-shadow: 0 5px 15px rgba(255, 215, 0, 0.4);
        }
        
        .result {
            margin-top: 1rem;
            padding: 1rem;
            background: rgba(255, 215, 0, 0.1);
            border-radius: 8px;
            border-left: 4px solid #ffd700;
            display: none;
        }
        
        .result.show {
            display: block;
            animation: fadeIn 0.5s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .error {
            color: #ff6b6b;
            background: rgba(255, 107, 107, 0.1);
            border-left-color: #ff6b6b;
        }
        
        .loading {
            text-align: center;
            color: #ffd700;
        }
        
        /* Price ticker */
        .price-ticker {
            background: rgba(0, 0, 0, 0.5);
            padding: 1rem;
            margin-bottom: 2rem;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .ticker-content {
            display: flex;
            gap: 2rem;
            animation: scroll 30s linear infinite;
        }
        
        .ticker-item {
            white-space: nowrap;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .price-positive { color: #4ade80; }
        .price-negative { color: #f87171; }
        
        @keyframes scroll {
            0% { transform: translateX(100%); }
            100% { transform: translateX(-100%); }
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .tools-grid {
                grid-template-columns: 1fr;
            }
            
            .page-title h1 {
                font-size: 2rem;
            }
            
            .nav-menu {
                display: none;
            }
        }
        
        .back-btn {
            background: rgba(255, 215, 0, 0.2);
            color: #ffd700;
            border: 1px solid rgba(255, 215, 0, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            text-decoration: none;
            display: inline-block;
            margin-bottom: 2rem;
            transition: all 0.3s;
        }
        
        .back-btn:hover {
            background: rgba(255, 215, 0, 0.3);
            transform: translateX(-5px);
        }
    </style>
</head>
<body>
    <header>
        <nav class="container">
            <a href="../index.html" class="logo">üöÄ CryptoTools Pro</a>
            <ul class="nav-menu">
                <li><a href="../index.html">Home</a></li>
                <li><a href="index.html">Tools</a></li>
                <li><a href="../news/">News</a></li>
                <li><a href="../guides/">Guides</a></li>
            </ul>
        </nav>
    </header>

    <main class="container">
        <a href="../index.html" class="back-btn">‚Üê Back to Home</a>
        
        <div class="page-title">
            <h1>Professional Crypto Tools</h1>
            <p>Complete suite of calculators, converters and analysis tools</p>
        </div>

        <!-- Price Ticker -->
        <div class="price-ticker">
            <div class="ticker-content" id="priceTicker">
                <!-- Loaded dynamically -->
            </div>
        </div>

        <div class="tools-grid">
            <!-- Converter Tool -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('converter', event)">
                    <span class="tool-icon">üîÑ</span>
                    <h3 class="tool-title">Crypto Converter</h3>
                </div>
                <p class="tool-description">Convert between different cryptocurrencies and fiat currencies with real-time rates</p>
                <div class="tool-form" id="converter">
                    <div class="form-group">
                        <label>From Currency:</label>
                        <select id="fromCurrency">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                            <option value="solana">Solana (SOL)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>To Currency:</label>
                        <select id="toCurrency">
                            <option value="usd">USD</option>
                            <option value="eur">EUR</option>
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Amount:</label>
                        <input type="number" id="convertAmount" placeholder="Enter amount" step="any">
                    </div>
                    <button class="btn" onclick="convertCurrency()">Convert</button>
                    <div class="result" id="convertResult"></div>
                </div>
            </div>

            <!-- Portfolio Tracker -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('portfolio')">
                    <span class="tool-icon">üìä</span>
                    <h3 class="tool-title">Portfolio Tracker</h3>
                </div>
                <p class="tool-description">Track your cryptocurrency portfolio value and performance</p>
                <div class="tool-form" id="portfolio">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="portfolioCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                            <option value="solana">Solana (SOL)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Amount Held:</label>
                        <input type="number" id="portfolioAmount" placeholder="0.0" step="any">
                    </div>
                    <div class="form-group">
                        <label>Purchase Price (USD):</label>
                        <input type="number" id="purchasePrice" placeholder="0.0" step="any">
                    </div>
                    <button class="btn" onclick="calculatePortfolio()">Calculate Portfolio</button>
                    <div class="result" id="portfolioResult"></div>
                </div>
            </div>

            <!-- DCA Calculator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('dca')">
                    <span class="tool-icon">üí∞</span>
                    <h3 class="tool-title">DCA Calculator</h3>
                </div>
                <p class="tool-description">Calculate Dollar Cost Averaging returns for any cryptocurrency</p>
                <div class="tool-form" id="dca">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="dcaCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Investment Amount (USD):</label>
                        <input type="number" id="dcaAmount" placeholder="100" step="any">
                    </div>
                    <div class="form-group">
                        <label>Frequency:</label>
                        <select id="dcaFrequency">
                            <option value="weekly">Weekly</option>
                            <option value="monthly">Monthly</option>
                            <option value="daily">Daily</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Time Period (months):</label>
                        <input type="number" id="dcaPeriod" placeholder="12" min="1" max="60">
                    </div>
                    <button class="btn" onclick="calculateDCA()">Calculate DCA</button>
                    <div class="result" id="dcaResult"></div>
                </div>
            </div>

            <!-- Bitcoin Calculator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('bitcoin')">
                    <span class="tool-icon">‚Çø</span>
                    <h3 class="tool-title">Bitcoin Calculator</h3>
                </div>
                <p class="tool-description">Advanced Bitcoin calculations and conversions</p>
                <div class="tool-form" id="bitcoin">
                    <div class="form-group">
                        <label>Bitcoin Amount:</label>
                        <input type="number" id="btcAmount" placeholder="1.0" step="any">
                    </div>
                    <div class="form-group">
                        <label>Target Currency:</label>
                        <select id="btcCurrency">
                            <option value="usd">USD</option>
                            <option value="eur">EUR</option>
                            <option value="gbp">GBP</option>
                            <option value="jpy">JPY</option>
                        </select>
                    </div>
                    <button class="btn" onclick="calculateBitcoin()">Calculate Value</button>
                    <div class="result" id="bitcoinResult"></div>
                </div>
            </div>

            <!-- Exchange Comparator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('exchange')">
                    <span class="tool-icon">‚öñÔ∏è</span>
                    <h3 class="tool-title">Exchange Comparator</h3>
                </div>
                <p class="tool-description">Compare cryptocurrency prices across different exchanges</p>
                <div class="tool-form" id="exchange">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="exchangeCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Amount:</label>
                        <input type="number" id="exchangeAmount" placeholder="1.0" step="any">
                    </div>
                    <button class="btn" onclick="compareExchanges()">Compare Prices</button>
                    <div class="result" id="exchangeResult"></div>
                </div>
            </div>

            <!-- Price Alerts -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('alerts')">
                    <span class="tool-icon">üîî</span>
                    <h3 class="tool-title">Price Alerts</h3>
                </div>
                <p class="tool-description">Set price alerts for your favorite cryptocurrencies</p>
                <div class="tool-form" id="alerts">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="alertCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Target Price (USD):</label>
                        <input type="number" id="targetPrice" placeholder="50000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Alert Type:</label>
                        <select id="alertType">
                            <option value="above">Above Target</option>
                            <option value="below">Below Target</option>
                        </select>
                    </div>
                    <button class="btn" onclick="setAlert()">Set Alert</button>
                    <div class="result" id="alertResult"></div>
                </div>
            </div>

            <!-- Fear & Greed Calculator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('feargreed')">
                    <span class="tool-icon">üò±</span>
                    <h3 class="tool-title">Fear & Greed Calculator</h3>
                </div>
                <p class="tool-description">Analyze market sentiment with Fear & Greed Index</p>
                <div class="tool-form" id="feargreed">
                    <div class="form-group">
                        <label>Market Cap Change (%):</label>
                        <input type="number" id="marketCapChange" placeholder="5.2" step="any">
                    </div>
                    <div class="form-group">
                        <label>Volume Change (%):</label>
                        <input type="number" id="volumeChange" placeholder="12.5" step="any">
                    </div>
                    <div class="form-group">
                        <label>Social Media Mentions:</label>
                        <input type="number" id="socialMentions" placeholder="1000" min="0">
                    </div>
                    <button class="btn" onclick="calculateFearGreed()">Calculate Index</button>
                    <div class="result" id="feargreedResult"></div>
                </div>
            </div>

            <!-- Tax Calculator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('tax')">
                    <span class="tool-icon">üßæ</span>
                    <h3 class="tool-title">Tax Calculator</h3>
                </div>
                <p class="tool-description">Calculate crypto taxes and capital gains</p>
                <div class="tool-form" id="tax">
                    <div class="form-group">
                        <label>Purchase Price (USD):</label>
                        <input type="number" id="taxPurchasePrice" placeholder="30000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Sale Price (USD):</label>
                        <input type="number" id="taxSalePrice" placeholder="35000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Amount:</label>
                        <input type="number" id="taxAmount" placeholder="1.0" step="any">
                    </div>
                    <div class="form-group">
                        <label>Tax Rate (%):</label>
                        <input type="number" id="taxRate" placeholder="20" min="0" max="100">
                    </div>
                    <button class="btn" onclick="calculateTax()">Calculate Tax</button>
                    <div class="result" id="taxResult"></div>
                </div>
            </div>

            <!-- Technical Analysis -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('technical')">
                    <span class="tool-icon">üìà</span>
                    <h3 class="tool-title">Technical Analysis</h3>
                </div>
                <p class="tool-description">Advanced technical analysis indicators and signals</p>
                <div class="tool-form" id="technical">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="technicalCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Timeframe:</label>
                        <select id="timeframe">
                            <option value="1h">1 Hour</option>
                            <option value="4h">4 Hours</option>
                            <option value="1d">1 Day</option>
                            <option value="1w">1 Week</option>
                        </select>
                    </div>
                    <button class="btn" onclick="analyzeTechnical()">Analyze</button>
                    <div class="result" id="technicalResult"></div>
                </div>
            </div>

            <!-- Trading Simulator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('trading')">
                    <span class="tool-icon">üéÆ</span>
                    <h3 class="tool-title">Trading Simulator</h3>
                </div>
                <p class="tool-description">Practice trading with virtual money</p>
                <div class="tool-form" id="trading">
                    <div class="form-group">
                        <label>Virtual Balance (USD):</label>
                        <input type="number" id="virtualBalance" placeholder="10000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="tradingCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Trade Type:</label>
                        <select id="tradeType">
                            <option value="buy">Buy</option>
                            <option value="sell">Sell</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Amount (USD):</label>
                        <input type="number" id="tradeAmount" placeholder="1000" step="any">
                    </div>
                    <button class="btn" onclick="simulateTrade()">Execute Trade</button>
                    <div class="result" id="tradingResult"></div>
                </div>
            </div>

            <!-- Mining Calculator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('mining')">
                    <span class="tool-icon">‚õèÔ∏è</span>
                    <h3 class="tool-title">Mining Calculator</h3>
                </div>
                <p class="tool-description">Calculate mining profitability and returns</p>
                <div class="tool-form" id="mining">
                    <div class="form-group">
                        <label>Hash Rate (MH/s):</label>
                        <input type="number" id="hashRate" placeholder="100" step="any">
                    </div>
                    <div class="form-group">
                        <label>Power Consumption (W):</label>
                        <input type="number" id="powerConsumption" placeholder="3000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Electricity Cost ($/kWh):</label>
                        <input type="number" id="electricityCost" placeholder="0.12" step="any">
                    </div>
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="miningCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                        </select>
                    </div>
                    <button class="btn" onclick="calculateMining()">Calculate Profitability</button>
                    <div class="result" id="miningResult"></div>
                </div>
            </div>

            <!-- Paper Wallet Generator -->
            <div class="tool-card">
                <div class="tool-header" onclick="toggleTool('paperwallet')">
                    <span class="tool-icon">üìÑ</span>
                    <h3 class="tool-title">Paper Wallet Generator</h3>
                </div>
                <p class="tool-description">Generate secure paper wallets for offline storage</p>
                <div class="tool-form" id="paperwallet">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="walletCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="litecoin">Litecoin (LTC)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Number of Wallets:</label>
                        <input type="number" id="walletCount" placeholder="1" min="1" max="10">
                    </div>
                    <button class="btn" onclick="generateWallet()">Generate Wallet</button>
                    <div class="result" id="paperwalletResult"></div>
                </div>
            </div>
        </div>

            <!-- Technical Analysis -->
            <div class="tool-card" onclick="toggleTool('technical')">
                <div class="tool-header">
                    <span class="tool-icon">üìà</span>
                    <h3 class="tool-title">Technical Analysis</h3>
                </div>
                <p class="tool-description">Advanced technical analysis indicators and signals</p>
                <div class="tool-form" id="technical">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="technicalCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Timeframe:</label>
                        <select id="timeframe">
                            <option value="1h">1 Hour</option>
                            <option value="4h">4 Hours</option>
                            <option value="1d">1 Day</option>
                            <option value="1w">1 Week</option>
                        </select>
                    </div>
                    <button class="btn" onclick="analyzeTechnical()">Analyze</button>
                    <div class="result" id="technicalResult"></div>
                </div>
            </div>

            <!-- Trading Simulator -->
            <div class="tool-card" onclick="toggleTool('trading')">
                <div class="tool-header">
                    <span class="tool-icon">üéÆ</span>
                    <h3 class="tool-title">Trading Simulator</h3>
                </div>
                <p class="tool-description">Practice trading with virtual money</p>
                <div class="tool-form" id="trading">
                    <div class="form-group">
                        <label>Virtual Balance (USD):</label>
                        <input type="number" id="virtualBalance" placeholder="10000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="tradingCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="cardano">Cardano (ADA)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Trade Type:</label>
                        <select id="tradeType">
                            <option value="buy">Buy</option>
                            <option value="sell">Sell</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Amount (USD):</label>
                        <input type="number" id="tradeAmount" placeholder="1000" step="any">
                    </div>
                    <button class="btn" onclick="simulateTrade()">Execute Trade</button>
                    <div class="result" id="tradingResult"></div>
                </div>
            </div>

            <!-- Mining Calculator -->
            <div class="tool-card" onclick="toggleTool('mining')">
                <div class="tool-header">
                    <span class="tool-icon">‚õèÔ∏è</span>
                    <h3 class="tool-title">Mining Calculator</h3>
                </div>
                <p class="tool-description">Calculate mining profitability and returns</p>
                <div class="tool-form" id="mining">
                    <div class="form-group">
                        <label>Hash Rate (MH/s):</label>
                        <input type="number" id="hashRate" placeholder="100" step="any">
                    </div>
                    <div class="form-group">
                        <label>Power Consumption (W):</label>
                        <input type="number" id="powerConsumption" placeholder="3000" step="any">
                    </div>
                    <div class="form-group">
                        <label>Electricity Cost ($/kWh):</label>
                        <input type="number" id="electricityCost" placeholder="0.12" step="any">
                    </div>
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="miningCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                        </select>
                    </div>
                    <button class="btn" onclick="calculateMining()">Calculate Profitability</button>
                    <div class="result" id="miningResult"></div>
                </div>
            </div>

            <!-- Paper Wallet Generator -->
            <div class="tool-card" onclick="toggleTool('paperwallet')">
                <div class="tool-header">
                    <span class="tool-icon">üìÑ</span>
                    <h3 class="tool-title">Paper Wallet Generator</h3>
                </div>
                <p class="tool-description">Generate secure paper wallets for offline storage</p>
                <div class="tool-form" id="paperwallet">
                    <div class="form-group">
                        <label>Cryptocurrency:</label>
                        <select id="walletCoin">
                            <option value="bitcoin">Bitcoin (BTC)</option>
                            <option value="ethereum">Ethereum (ETH)</option>
                            <option value="litecoin">Litecoin (LTC)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Number of Wallets:</label>
                        <input type="number" id="walletCount" placeholder="1" min="1" max="10">
                    </div>
                    <button class="btn" onclick="generateWallet()">Generate Wallet</button>
                    <div class="result" id="paperwalletResult"></div>
                </div>
            </div>
        </div>
    </main>

    <script>
        // Global variables
        let cryptoData = {};
        let currentTool = null;

        // Mock data for demo (bypasses CORS issues)
        const mockCryptoData = {
            bitcoin: { 
                usd: 45230.50, eur: 41850.30, gbp: 36420.80, jpy: 6785430.20,
                usd_24h_change: 2.45, market_cap: 890000000000 
            },
            ethereum: { 
                usd: 2580.75, eur: 2385.60, gbp: 2076.40, jpy: 387650.90,
                usd_24h_change: -1.23, market_cap: 310000000000 
            },
            cardano: { 
                usd: 0.4520, eur: 0.4180, gbp: 0.3640, jpy: 67.85,
                usd_24h_change: 5.67, market_cap: 15800000000 
            },
            solana: { 
                usd: 98.75, eur: 91.30, gbp: 79.60, jpy: 14825.50,
                usd_24h_change: 3.21, market_cap: 45600000000 
            },
            polkadot: { 
                usd: 6.85, eur: 6.33, gbp: 5.51, jpy: 1028.75,
                usd_24h_change: -0.89, market_cap: 8900000000 
            },
            chainlink: { 
                usd: 14.25, eur: 13.18, gbp: 11.48, jpy: 2140.50,
                usd_24h_change: 1.75, market_cap: 8200000000 
            },
            litecoin: { 
                usd: 68.90, eur: 63.70, gbp: 55.50, jpy: 10350.60,
                usd_24h_change: 0.95, market_cap: 5100000000 
            },
            polygon: { 
                usd: 0.7890, eur: 0.7300, gbp: 0.6360, jpy: 118.50,
                usd_24h_change: 4.32, market_cap: 7800000000 
            }
        };

        // API Functions with fallback to mock data
        async function fetchCryptoData(coins = 'bitcoin,ethereum,cardano,solana') {
            try {
                // Try real API first
                const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${coins}&vs_currencies=usd,eur,gbp,jpy&include_24hr_change=true&include_market_cap=true`);
                
                if (!response.ok) throw new Error('API request failed');
                
                const data = await response.json();
                cryptoData = data;
                return data;
            } catch (error) {
                console.log('Using mock data due to API limitations');
                // Use mock data as fallback
                const requestedCoins = coins.split(',');
                const filteredData = {};
                requestedCoins.forEach(coin => {
                    if (mockCryptoData[coin]) {
                        filteredData[coin] = mockCryptoData[coin];
                    }
                });
                cryptoData = filteredData;
                return filteredData;
            }
        }

        async function fetchHistoricalData(coinId, days = 30) {
            try {
                const response = await fetch(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=usd&days=${days}`);
                if (!response.ok) throw new Error('API request failed');
                const data = await response.json();
                return data;
            } catch (error) {
                console.log('Historical data not available, using mock data');
                return null;
            }
        }

        // Tool functions
        function toggleTool(toolId, event) {
            if (event) {
                event.stopPropagation();
            }
            
            const allTools = document.querySelectorAll('.tool-form');
            const targetTool = document.getElementById(toolId);
            
            if (currentTool === toolId) {
                targetTool.classList.remove('active');
                currentTool = null;
            } else {
                allTools.forEach(tool => tool.classList.remove('active'));
                targetTool.classList.add('active');
                currentTool = toolId;
            }
        }

        async function convertCurrency() {
            const fromCurrency = document.getElementById('fromCurrency').value;
            const toCurrency = document.getElementById('toCurrency').value;
            const amount = parseFloat(document.getElementById('convertAmount').value);
            
            if (!amount || amount <= 0) {
                showResult('convertResult', 'Please enter a valid amount', 'error');
                return;
            }

            showResult('convertResult', 'Calculating...', 'loading');

            try {
                const data = await fetchCryptoData(`${fromCurrency},${toCurrency}`);
                
                let fromPrice = 1, toPrice = 1;
                
                if (data[fromCurrency]) {
                    fromPrice = data[fromCurrency].usd;
                }
                
                if (data[toCurrency]) {
                    toPrice = 1 / data[toCurrency].usd;
                } else {
                    // Handle fiat currencies
                    const rates = { usd: 1, eur: 0.92, gbp: 0.79, jpy: 150 };
                    toPrice = rates[toCurrency] || 1;
                }
                
                const result = (amount * fromPrice * toPrice).toFixed(8);
                const currentRate = (fromPrice * toPrice).toFixed(8);
                
                showResult('convertResult', `
                    <strong>Conversion Result:</strong><br>
                    ${amount} ${fromCurrency.toUpperCase()} = ${result} ${toCurrency.toUpperCase()}<br>
                    Exchange Rate: 1 ${fromCurrency.toUpperCase()} = ${currentRate} ${toCurrency.toUpperCase()}<br>
                    Updated: ${new Date().toLocaleTimeString()}
                `);
                
            } catch (error) {
                showResult('convertResult', 'Error converting currency. Please try again.', 'error');
            }
        }

        async function calculatePortfolio() {
            const coin = document.getElementById('portfolioCoin').value;
            const amount = parseFloat(document.getElementById('portfolioAmount').value);
            const purchasePrice = parseFloat(document.getElementById('purchasePrice').value);
            
            if (!amount || !purchasePrice || amount <= 0 || purchasePrice <= 0) {
                showResult('portfolioResult', 'Please enter valid amounts', 'error');
                return;
            }

            showResult('portfolioResult', 'Loading...', 'loading');

            try {
                const data = await fetchCryptoData(coin);
                const currentPrice = data[coin].usd;
                const currentValue = amount * currentPrice;
                const initialValue = amount * purchasePrice;
                const profit = currentValue - initialValue;
                const profitPercentage = ((profit / initialValue) * 100).toFixed(2);
                
                const result = `
                    <strong>Portfolio Analysis:</strong><br>
                    Current Value: ${currentValue.toFixed(2)}<br>
                    Initial Investment: ${initialValue.toFixed(2)}<br>
                    Profit/Loss: ${profit.toFixed(2)} (${profitPercentage}%)<br>
                    Current Price: ${currentPrice.toFixed(2)}
                `;
                
                showResult('portfolioResult', result);
                
            } catch (error) {
                showResult('portfolioResult', 'Error calculating portfolio', 'error');
            }
        }

        async function calculateDCA() {
            const coin = document.getElementById('dcaCoin').value;
            const amount = parseFloat(document.getElementById('dcaAmount').value);
            const frequency = document.getElementById('dcaFrequency').value;
            const period = parseInt(document.getElementById('dcaPeriod').value);
            
            if (!amount || !period || amount <= 0 || period <= 0) {
                showResult('dcaResult', 'Please enter valid values', 'error');
                return;
            }

            showResult('dcaResult', 'Loading...', 'loading');

            try {
                const data = await fetchCryptoData(coin);
                const currentPrice = data[coin].usd;
                
                let totalInvestment, totalPurchases;
                
                switch(frequency) {
                    case 'daily':
                        totalPurchases = period * 30;
                        break;
                    case 'weekly':
                        totalPurchases = period * 4;
                        break;
                    case 'monthly':
                        totalPurchases = period;
                        break;
                }
                
                totalInvestment = amount * totalPurchases;
                const avgPrice = currentPrice * 0.85; // Simplified DCA average
                const totalCoins = totalInvestment / avgPrice;
                const currentValue = totalCoins * currentPrice;
                const profit = currentValue - totalInvestment;
                const roi = ((profit / totalInvestment) * 100).toFixed(2);
                
                const result = `
                    <strong>DCA Strategy Results:</strong><br>
                    Total Investment: ${totalInvestment.toFixed(2)}<br>
                    Total Coins Acquired: ${totalCoins.toFixed(6)}<br>
                    Current Value: ${currentValue.toFixed(2)}<br>
                    Profit/Loss: ${profit.toFixed(2)} (${roi}%)<br>
                    Average Buy Price: ${avgPrice.toFixed(2)}
                `;
                
                showResult('dcaResult', result);
                
            } catch (error) {
                showResult('dcaResult', 'Error calculating DCA', 'error');
            }
        }

        async function calculateBitcoin() {
            const btcAmount = parseFloat(document.getElementById('btcAmount').value);
            const currency = document.getElementById('btcCurrency').value;
            
            if (!btcAmount || btcAmount <= 0) {
                showResult('bitcoinResult', 'Please enter a valid Bitcoin amount', 'error');
                return;
            }

            showResult('bitcoinResult', 'Loading...', 'loading');

            try {
                const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=${currency}&include_24hr_change=true`);
                const data = await response.json();
                const price = data.bitcoin[currency];
                const change24h = data.bitcoin[`${currency}_24h_change`];
                const totalValue = btcAmount * price;
                
                const result = `
                    <strong>Bitcoin Calculation:</strong><br>
                    ${btcAmount} BTC = ${totalValue.toLocaleString()} ${currency.toUpperCase()}<br>
                    Current BTC Price: ${price.toLocaleString()} ${currency.toUpperCase()}<br>
                    24h Change: ${change24h > 0 ? '+' : ''}${change24h.toFixed(2)}%<br>
                    Market Cap Rank: #1
                `;
                
                showResult('bitcoinResult', result);
                
            } catch (error) {
                showResult('bitcoinResult', 'Error calculating Bitcoin value', 'error');
            }
        }

        async function compareExchanges() {
            const coin = document.getElementById('exchangeCoin').value;
            const amount = parseFloat(document.getElementById('exchangeAmount').value);
            
            if (!amount || amount <= 0) {
                showResult('exchangeResult', 'Please enter a valid amount', 'error');
                return;
            }

            showResult('exchangeResult', 'Loading...', 'loading');

            try {
                const data = await fetchCryptoData(coin);
                const basePrice = data[coin].usd;
                
                // Simulate different exchange prices (¬±0.5% variation)
                const exchanges = [
                    { name: 'Binance', price: basePrice * (1 + (Math.random() - 0.5) * 0.01) },
                    { name: 'Coinbase', price: basePrice * (1 + (Math.random() - 0.5) * 0.01) },
                    { name: 'Kraken', price: basePrice * (1 + (Math.random() - 0.5) * 0.01) },
                    { name: 'KuCoin', price: basePrice * (1 + (Math.random() - 0.5) * 0.01) }
                ];
                
                exchanges.sort((a, b) => b.price - a.price);
                
                let result = `<strong>Exchange Comparison for ${amount} ${coin.toUpperCase()}:</strong><br><br>`;
                exchanges.forEach((exchange, index) => {
                    const value = amount * exchange.price;
                    const badge = index === 0 ? ' ü•á' : index === exchanges.length - 1 ? ' üí∞' : '';
                    result += `${exchange.name}: ${value.toFixed(2)} (${exchange.price.toFixed(2)}${badge})<br>`;
                });
                
                showResult('exchangeResult', result);
                
            } catch (error) {
                showResult('exchangeResult', 'Error comparing exchanges', 'error');
            }
        }

        function setAlert() {
            const coin = document.getElementById('alertCoin').value;
            const targetPrice = parseFloat(document.getElementById('targetPrice').value);
            const alertType = document.getElementById('alertType').value;
            
            if (!targetPrice || targetPrice <= 0) {
                showResult('alertResult', 'Please enter a valid target price', 'error');
                return;
            }

            // Simulate alert setting (in real app, this would save to backend)
            const result = `
                <strong>Alert Set Successfully!</strong><br>
                Coin: ${coin.toUpperCase()}<br>
                Target Price: ${targetPrice.toLocaleString()}<br>
                Alert Type: ${alertType}<br>
                Status: Active üü¢<br>
                <em>Note: This is a demo. Real alerts would require backend integration.</em>
            `;
            
            showResult('alertResult', result);
        }

        function calculateFearGreed() {
            const marketCapChange = parseFloat(document.getElementById('marketCapChange').value) || 0;
            const volumeChange = parseFloat(document.getElementById('volumeChange').value) || 0;
            const socialMentions = parseInt(document.getElementById('socialMentions').value) || 0;
            
            // Simplified Fear & Greed calculation
            let score = 50; // Neutral starting point
            
            // Market cap influence (¬±20 points)
            score += Math.min(Math.max(marketCapChange * 2, -20), 20);
            
            // Volume influence (¬±15 points)
            score += Math.min(Math.max(volumeChange * 1.5, -15), 15);
            
            // Social mentions influence (¬±15 points)
            const socialScore = Math.min(socialMentions / 100, 15);
            score += socialScore;
            
            score = Math.min(Math.max(score, 0), 100);
            
            let sentiment, color, emoji;
            if (score <= 25) {
                sentiment = 'Extreme Fear';
                color = '#ff4444';
                emoji = 'üò±';
            } else if (score <= 45) {
                sentiment = 'Fear';
                color = '#ff8844';
                emoji = 'üò®';
            } else if (score <= 55) {
                sentiment = 'Neutral';
                color = '#ffdd44';
                emoji = 'üòê';
            } else if (score <= 75) {
                sentiment = 'Greed';
                color = '#88ff44';
                emoji = 'üòÑ';
            } else {
                sentiment = 'Extreme Greed';
                color = '#44ff44';
                emoji = 'ü§ë';
            }
            
            const result = `
                <strong>Fear & Greed Index:</strong><br>
                <div style="font-size: 2rem; color: ${color}; margin: 1rem 0;">${emoji} ${score}/100</div>
                <strong style="color: ${color};">${sentiment}</strong><br><br>
                Market Sentiment: ${sentiment}<br>
                Recommendation: ${score > 75 ? 'Consider taking profits' : score < 25 ? 'Good buying opportunity' : 'Monitor closely'}
            `;
            
            showResult('feargreedResult', result);
        }

        function calculateTax() {
            const purchasePrice = parseFloat(document.getElementById('taxPurchasePrice').value);
            const salePrice = parseFloat(document.getElementById('taxSalePrice').value);
            const amount = parseFloat(document.getElementById('taxAmount').value);
            const taxRate = parseFloat(document.getElementById('taxRate').value);
            
            if (!purchasePrice || !salePrice || !amount || !taxRate || 
                purchasePrice <= 0 || salePrice <= 0 || amount <= 0 || taxRate < 0) {
                showResult('taxResult', 'Please enter valid values', 'error');
                return;
            }

            const totalPurchase = purchasePrice * amount;
            const totalSale = salePrice * amount;
            const capitalGain = totalSale - totalPurchase;
            const taxOwed = capitalGain > 0 ? (capitalGain * taxRate / 100) : 0;
            const netProfit = capitalGain - taxOwed;
            
            const result = `
                <strong>Tax Calculation:</strong><br>
                Purchase Value: ${totalPurchase.toFixed(2)}<br>
                Sale Value: ${totalSale.toFixed(2)}<br>
                Capital Gain/Loss: ${capitalGain.toFixed(2)}<br>
                Tax Owed: ${taxOwed.toFixed(2)}<br>
                Net Profit: ${netProfit.toFixed(2)}<br>
                Effective Tax Rate: ${taxRate}%
            `;
            
            showResult('taxResult', result);
        }

        async function analyzeTechnical() {
            const coin = document.getElementById('technicalCoin').value;
            const timeframe = document.getElementById('timeframe').value;
            
            showResult('technicalResult', 'Loading...', 'loading');

            try {
                const data = await fetchCryptoData(coin);
                const currentPrice = data[coin].usd;
                const change24h = data[coin].usd_24h_change;
                
                // Simulate technical indicators
                const rsi = Math.random() * 100;
                const macd = Math.random() > 0.5 ? 'Bullish' : 'Bearish';
                const ma50 = currentPrice * (1 + (Math.random() - 0.5) * 0.1);
                const ma200 = currentPrice * (1 + (Math.random() - 0.5) * 0.2);
                
                let signal = 'Neutral';
                if (rsi > 70) signal = 'Overbought';
                else if (rsi < 30) signal = 'Oversold';
                
                const result = `
                    <strong>Technical Analysis - ${coin.toUpperCase()}:</strong><br>
                    Current Price: ${currentPrice.toFixed(2)}<br>
                    24h Change: ${change24h.toFixed(2)}%<br>
                    RSI (14): ${rsi.toFixed(1)} - ${signal}<br>
                    MACD: ${macd}<br>
                    MA50: ${ma50.toFixed(2)}<br>
                    MA200: ${ma200.toFixed(2)}<br>
                    Overall Signal: ${signal}
                `;
                
                showResult('technicalResult', result);
                
            } catch (error) {
                showResult('technicalResult', 'Error analyzing technical data', 'error');
            }
        }

        function simulateTrade() {
            const balance = parseFloat(document.getElementById('virtualBalance').value);
            const coin = document.getElementById('tradingCoin').value;
            const tradeType = document.getElementById('tradeType').value;
            const tradeAmount = parseFloat(document.getElementById('tradeAmount').value);
            
            if (!balance || !tradeAmount || balance <= 0 || tradeAmount <= 0) {
                showResult('tradingResult', 'Please enter valid values', 'error');
                return;
            }

            if (tradeAmount > balance) {
                showResult('tradingResult', 'Insufficient balance for this trade', 'error');
                return;
            }

            // Simulate trade execution
            const executionPrice = Math.random() * 0.002 + 0.999; // ¬±0.1% slippage
            const fee = tradeAmount * 0.001; // 0.1% trading fee
            const netAmount = tradeAmount - fee;
            const newBalance = balance - tradeAmount;
            
            const result = `
                <strong>Trade Executed Successfully!</strong><br>
                Trade Type: ${tradeType.toUpperCase()}<br>
                Amount: ${tradeAmount.toFixed(2)}<br>
                Execution Rate: ${executionPrice.toFixed(6)}<br>
                Trading Fee: ${fee.toFixed(2)}<br>
                Net Amount: ${netAmount.toFixed(2)}<br>
                Remaining Balance: ${newBalance.toFixed(2)}<br>
                Status: ‚úÖ Completed
            `;
            
            showResult('tradingResult', result);
        }

        async function calculateMining() {
            const hashRate = parseFloat(document.getElementById('hashRate').value);
            const powerConsumption = parseFloat(document.getElementById('powerConsumption').value);
            const electricityCost = parseFloat(document.getElementById('electricityCost').value);
            const coin = document.getElementById('miningCoin').value;
            
            if (!hashRate || !powerConsumption || !electricityCost || 
                hashRate <= 0 || powerConsumption <= 0 || electricityCost <= 0) {
                showResult('miningResult', 'Please enter valid values', 'error');
                return;
            }

            showResult('miningResult', 'Loading...', 'loading');

            try {
                const data = await fetchCryptoData(coin);
                const coinPrice = data[coin].usd;
                
                // Simplified mining calculations
                const dailyPowerCost = (powerConsumption / 1000) * 24 * electricityCost;
                const networkHashrate = coin === 'bitcoin' ? 400000000 : 800000000; // TH/s
                const blockReward = coin === 'bitcoin' ? 6.25 : 2.0;
                const blocksPerDay = coin === 'bitcoin' ? 144 : 7200;
                
                const dailyCoins = (hashRate / networkHashrate) * blockReward * blocksPerDay;
                const dailyRevenue = dailyCoins * coinPrice;
                const dailyProfit = dailyRevenue - dailyPowerCost;
                const monthlyProfit = dailyProfit * 30;
                const breakEvenDays = dailyProfit > 0 ? Math.ceil(10000 / dailyProfit) : 'Never';
                
                const result = `
                    <strong>Mining Profitability - ${coin.toUpperCase()}:</strong><br>
                    Daily Revenue: ${dailyRevenue.toFixed(2)}<br>
                    Daily Power Cost: ${dailyPowerCost.toFixed(2)}<br>
                    Daily Profit: ${dailyProfit.toFixed(2)}<br>
                    Monthly Profit: ${monthlyProfit.toFixed(2)}<br>
                    Daily Coins Mined: ${dailyCoins.toFixed(8)}<br>
                    Break Even: ${breakEvenDays} days<br>
                    Profitability: ${dailyProfit > 0 ? '‚úÖ Profitable' : '‚ùå Not Profitable'}
                `;
                
                showResult('miningResult', result);
                
            } catch (error) {
                showResult('miningResult', 'Error calculating mining profitability', 'error');
            }
        }

        function generateWallet() {
            const coin = document.getElementById('walletCoin').value;
            const count = parseInt(document.getElementById('walletCount').value);
            
            if (!count || count <= 0 || count > 10) {
                showResult('paperwalletResult', 'Please enter a valid number of wallets (1-10)', 'error');
                return;
            }

            let result = `<strong>Generated ${count} ${coin.toUpperCase()} Paper Wallet(s):</strong><br><br>`;
            
            for (let i = 1; i <= count; i++) {
                // Generate random wallet addresses (demo purposes)
                const address = generateRandomAddress(coin);
                const privateKey = generateRandomPrivateKey();
                
                result += `
                    <strong>Wallet #${i}:</strong><br>
                    Address: <code style="background: rgba(0,0,0,0.3); padding: 2px 4px; border-radius: 3px;">${address}</code><br>
                    Private Key: <code style="background: rgba(0,0,0,0.3); padding: 2px 4px; border-radius: 3px;">${privateKey}</code><br><br>
                `;
            }
            
            result += `
                <div style="background: rgba(255,107,107,0.1); padding: 1rem; border-radius: 8px; border-left: 4px solid #ff6b6b; margin-top: 1rem;">
                    <strong>‚ö†Ô∏è Security Warning:</strong><br>
                    These are demo wallets for testing only. Never use generated wallets from web tools for real funds!
                </div>
            `;
            
            showResult('paperwalletResult', result);
        }

        // Utility functions
        function generateRandomAddress(coin) {
            const prefixes = {
                bitcoin: '1',
                ethereum: '0x',
                litecoin: 'L'
            };
            const prefix = prefixes[coin] || '0x';
            const chars = '0123456789ABCDEFabcdef';
            let address = prefix;
            const length = coin === 'ethereum' ? 40 : 33;
            
            for (let i = 0; i < length; i++) {
                address += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return address;
        }

        function generateRandomPrivateKey() {
            const chars = '0123456789ABCDEFabcdef';
            let key = '';
            for (let i = 0; i < 64; i++) {
                key += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return key;
        }

        function showResult(elementId, content, type = 'success') {
            const resultElement = document.getElementById(elementId);
            resultElement.innerHTML = content;
            resultElement.className = `result show ${type}`;
        }

        // Price ticker
        async function updatePriceTicker() {
            try {
                const data = await fetchCryptoData('bitcoin,ethereum,cardano,solana,polkadot,chainlink,litecoin,polygon');
                const tickerElement = document.getElementById('priceTicker');
                
                let tickerHTML = '';
                Object.keys(data).forEach(coin => {
                    const price = data[coin].usd;
                    const change = data[coin].usd_24h_change;
                    const changeClass = change >= 0 ? 'price-positive' : 'price-negative';
                    const symbol = change >= 0 ? '+' : '';
                    
                    tickerHTML += `
                        <div class="ticker-item">
                            <strong>${coin.toUpperCase()}:</strong>
                            <span>${price.toLocaleString()}</span>
                            <span class="${changeClass}">${symbol}${change.toFixed(2)}%</span>
                        </div>
                    `;
                });
                
                tickerElement.innerHTML = tickerHTML;
            } catch (error) {
                console.error('Error updating price ticker:', error);
            }
        }

        // Input validation for numbers only
        function addInputValidation() {
            const numberInputs = document.querySelectorAll('input[type="number"]');
            numberInputs.forEach(input => {
                input.addEventListener('keypress', function(e) {
                    const allowedChars = /[0-9.]/;
                    if (!allowedChars.test(e.key) && !['Backspace', 'Delete', 'Tab', 'Enter', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
                        e.preventDefault();
                    }
                });
                
                input.addEventListener('input', function(e) {
                    // Remove any non-numeric characters except decimal point
                    this.value = this.value.replace(/[^0-9.]/g, '');
                    
                    // Ensure only one decimal point
                    const parts = this.value.split('.');
                    if (parts.length > 2) {
                        this.value = parts[0] + '.' + parts.slice(1).join('');
                    }
                });
            });
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', async function() {
            await fetchCryptoData();
            updatePriceTicker();
            addInputValidation();
            
            // Update ticker every 60 seconds
            setInterval(updatePriceTicker, 60000);
        });

        // Close tool when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.tool-card')) {
                document.querySelectorAll('.tool-form').forEach(form => {
                    form.classList.remove('active');
                });
                currentTool = null;
            }
        });
    </script>
</body>
</html>
